{
  "name": "Playwright",
  "description": "Playwright testing framework questions",
  "questions": [
    {
      "id": 1,
      "question": "What is Playwright and what makes it different from Selenium?",
      "answer": "Playwright is a modern end-to-end testing framework by Microsoft. Key differences: 1) Auto-wait mechanism (waits for elements automatically), 2) Supports multiple browsers with single API, 3) Better handling of modern web apps (SPAs), 4) Built-in network interception, 5) Faster execution with parallel testing.",
      "difficulty": "easy",
      "tags": ["basics", "comparison"]
    },
    {
      "id": 2,
      "question": "Explain the difference between page.click() and page.locator().click() in Playwright.",
      "answer": "page.click(selector) is the legacy method that immediately searches for element. page.locator(selector).click() is the modern approach using locators - it's lazy (doesn't search until action), has auto-waiting, better error messages, and is more reliable for dynamic content.",
      "difficulty": "medium",
      "tags": ["locators", "best-practices"]
    },
    {
      "id": 3,
      "question": "How do you handle file uploads in Playwright?",
      "answer": "Use page.setInputFiles(selector, filePath) or locator.setInputFiles(). For multiple files: pass an array. To remove files: pass empty array. Example: await page.locator('input[type=\"file\"]').setInputFiles('path/to/file.pdf');",
      "difficulty": "medium",
      "tags": ["file-handling", "interactions"]
    },
    {
      "id": 4,
      "question": "What are Playwright fixtures and why are they useful?",
      "answer": "Fixtures are a way to establish test environment and share setup/teardown logic. They provide: 1) Automatic setup/cleanup, 2) Dependency injection, 3) Composability, 4) Isolation between tests. Example: custom 'authenticatedPage' fixture that logs in before each test.",
      "difficulty": "hard",
      "tags": ["fixtures", "test-organization"]
    },
    {
      "id": 5,
      "question": "How would you test a scenario that requires multiple browser contexts?",
      "answer": "Use browser.newContext() to create isolated contexts. Each context has its own cookies, storage, and cache. Example: const context1 = await browser.newContext(); const context2 = await browser.newContext(); Useful for testing multi-user scenarios or different permission levels.",
      "difficulty": "hard",
      "tags": ["contexts", "advanced"]
    }
  ]
}
